# Urgent: Review sorting in Movimientos and deploy on each view



movimientos:
  replace
    t.decimal  "IngresoPesos"
    t.decimal  "IngresoDolares"
    t.decimal  "EgresoPesos"
    t.decimal  "EgresoDolares"
    t.string "Comprobante"
  with their lowercase versions

Add yml to create navbar

Add Contribuciones
  Just a calculation form

Add Obligaciones
  Most complex

Add Presupuesto
  Add Visualizations of difference between Presupuesto and Executed

Miembros
  should have an ID 0 account for Visitas
  Improve show.html
  By default it should only show Active Miembros

Cuentas
  Make index table responsive
  Move Create button to the end of the table
  Show movimientos (with search) on show.html
  By default it should only show Active Cuentas

Vales
  By default show only pending Vales and verify summ
  Add search in index
  Add Link to Vales view in Cuenta
  Improve show.html
  Shouldn't be updateable - only create/destroy/rendir
  Improve Rindiendo
  By default it should only show today info
  Vales - Add Comentarios as an popup window
  has to have date selectable

Ofrendas
  By default it should only show today info
  Add Colors based on Cuenta?
  Improve show.html
  Review Busqueda

Movimientos
  By default it should only show today info
  Improve show.html
  Add Sorting fields

Arqueo
  Review default view on small screens


CSV Export - add inside index methods!
format.csv do
  CSV.generate(csv_str = '') do |csv|
    csv << %w(group_name group_id group_link_code first_name last_name person_id person_legacy_id class_time recorded_time)
    @rel.each do |record|
      csv << [
        record.group.try(:name),
        record.group.try(:id),
        record.group.try(:link_code),
        record.first_name,
        record.last_name,
        record.person_id,
        record.person.try(:legacy_id),
        record.attended_at.to_s,
        record.created_at.to_s
      ]
    end
  end
  render text: csv_str
end


Pagination
respond_to do |format|
      format.html do
        @records = @rel.paginate(page: params[:page], per_page: 100)
        @record_count = @records.total_entries
      end
